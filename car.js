// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
const cars = JSON.parse(localStorage.getItem('cars')) || [];
const currentUser = JSON.parse(localStorage.getItem('currentUser'));
const logo = document.getElementById('logo');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  engineTypes: ['–±–µ–Ω–∑–∏–Ω–æ–≤—ã–π', '–¥–∏–∑–µ–ª—å–Ω—ã–π', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π', '–≥–∏–±—Ä–∏–¥'],
  minYear: 1886,
  maxYear: new Date().getFullYear() + 1,
  regNumberRegex: /^[0-9]{4}[A-Za-z]{2}-[0-9]$/,
  engineRegex: /^\d+(\.\d)?$/
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const DOM = {
  regNumber: document.getElementById('regNumber'),
  alert: document.getElementById('alert'),
  carInfo: document.getElementById('carInfo'),
  addCarButton: document.getElementById('addCarButton'),
  addCarForm: document.getElementById('addCarForm'),
  formFields: {
    brand: document.getElementById('brand'),
    model: document.getElementById('model'),
    year: document.getElementById('year'),
    engine: document.getElementById('engine'),
    type: document.getElementById('type'),
    newRegNumber: document.getElementById('newRegNumber'),
    carImage: document.getElementById('carImage')
  }
};

// –£—Ç–∏–ª–∏—Ç—ã
const Utils = {
  showAlert: (message, type = 'error') => {
    DOM.alert.textContent = message;
    DOM.alert.className = `alert ${type}`;
    setTimeout(() => DOM.alert.textContent = '', 5000);
  },

  clearForm: () => {
    Object.values(DOM.formFields).forEach(field => {
      if (field.type !== 'file') field.value = '';
      else field.value = null;
    });
  },

  validateEngineType: (type) => CONFIG.engineTypes.includes(type.toLowerCase()),

  formatCarInfo: (car) => `
    <p><strong>üöó –ú–∞—Ä–∫–∞:</strong> ${car.brand}</p>
    <p><strong>üîß –ú–æ–¥–µ–ª—å:</strong> ${car.model}</p>
    <p><strong>üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</strong> ${car.year}</p>
    <p><strong>‚öôÔ∏è –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:</strong> ${car.engine} –ª</p>
    <p><strong>üîã –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:</strong> ${car.type}</p>
    <p><strong>üî¢ –ì–æ—Å. –Ω–æ–º–µ—Ä:</strong> ${car.regNumber}</p>
    <img src="${car.image}" class="car-image" alt="–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è">
  `
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function searchCar() {
  const regNumber = DOM.regNumber.value.trim();
  DOM.carInfo.innerHTML = '';
  DOM.addCarButton.style.display = 'none';

  if (!CONFIG.regNumberRegex.test(regNumber)) {
    Utils.showAlert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 1234AB-7');
    return;
  }

  const car = cars.find(c => c.regNumber === regNumber);

  if (car) {
    Utils.showAlert('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω!', 'success');
    let carHTML = Utils.formatCarInfo(car);

    if (currentUser?.role === 'admin') {
      carHTML += `
        <div class="admin-controls">
          <button class="delete-btn" 
                  onclick="deleteCar('${car.regNumber}')">
            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
          </button>
        </div>
      `;
    }

    DOM.carInfo.innerHTML = carHTML;
    DOM.carInfo.classList.add('active');
  } else {
    Utils.showAlert('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    if (currentUser?.role === 'admin') {
      DOM.addCarButton.style.display = 'block';
    }
  }
}

function deleteCar(regNumber) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?')) return;

  const index = cars.findIndex(c => c.regNumber === regNumber);
  if (index !== -1) {
    cars.splice(index, 1);
    localStorage.setItem('cars', JSON.stringify(cars));
    Utils.showAlert('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª–µ–Ω!', 'success');
    DOM.carInfo.classList.remove('active');
    DOM.regNumber.value = '';
  }
}

function showAddCarForm() {
  DOM.addCarButton.style.display = 'none';
  DOM.addCarForm.classList.add('active');
}

function hideAddCarForm() {
  DOM.addCarForm.classList.remove('active');
  Utils.clearForm();
}

async function addCar() {
  const formData = {
    brand: DOM.formFields.brand.value.trim(),
    model: DOM.formFields.model.value.trim(),
    year: parseInt(DOM.formFields.year.value.trim()),
    engine: DOM.formFields.engine.value.trim(),
    type: DOM.formFields.type.value.trim(),
    newRegNumber: DOM.formFields.newRegNumber.value.trim(),
    carImage: DOM.formFields.carImage.files[0]
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!CONFIG.regNumberRegex.test(formData.newRegNumber)) {
    Utils.showAlert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 1234AB-7');
    return;
  }

  if (!CONFIG.engineRegex.test(formData.engine)) {
    Utils.showAlert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—ä—ë–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è! –ü—Ä–∏–º–µ—Ä: 1.6 –∏–ª–∏ 2.0');
    return;
  }

  if (formData.year < CONFIG.minYear || formData.year > CONFIG.maxYear) {
    Utils.showAlert(`–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É ${CONFIG.minYear} –∏ ${CONFIG.maxYear}`);
    return;
  }

  if (!Utils.validateEngineType(formData.type)) {
    Utils.showAlert(`–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è: ${CONFIG.engineTypes.join(', ')}`);
    return;
  }

  if (cars.some(c => c.regNumber === formData.newRegNumber)) {
    Utils.showAlert('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    return;
  }

  if (!formData.carImage) {
    Utils.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
    return;
  }

  try {
    const imageBase64 = await readFileAsDataURL(formData.carImage);
    const newCar = {
      ...formData,
      regNumber: formData.newRegNumber,
      image: imageBase64
    };

    cars.push(newCar);
    localStorage.setItem('cars', JSON.stringify(cars));
    
    Utils.showAlert('–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
    hideAddCarForm();
    DOM.regNumber.value = formData.newRegNumber;
    searchCar();
  } catch (error) {
    Utils.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    console.error(error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function readFileAsDataURL(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (currentUser?.role === 'admin') {
  DOM.addCarButton.style.display = 'block';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
logo.addEventListener('click', () => {
  window.location.href = 'index.html';
});